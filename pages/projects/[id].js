import Head from "next/head";
import styles from "../../styles/Home.module.css";
import { PrismaClient } from "@prisma/client";
import { useSession, signIn, signOut } from "next-auth/react";
import { useState } from "react";
import Link from "next/link";

const prisma = new PrismaClient();

export default function Project({ project, allRequirements }) {
  const { data: session } = useSession();
  const [formData, setFormData] = useState({});
  const [requirements, setRequirements] = useState(allRequirements);

  async function saveRequirement(e) {
    e.preventDefault();
    e.target.reset();
    let dataObj = { formData, id: project.id}
    setRequirements([...requirements, formData]);
    const response = await fetch("../api/AddRequirement", {
      method: "POST",
      body: JSON.stringify(dataObj)
    });
    return await response.json();
  }

  return (
    <div className={styles.background}>
      <Head>
        <title>Slingshot - {project.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <nav class="bg-white border-gray-200 px-2 sm:px-4 py-2.5 rounded dark:bg-gray-800">
        <div class="container flex flex-wrap justify-between items-center mx-auto">
          <a href="/" class="flex">
            <span class="self-center text-lg font-semibold whitespace-nowrap dark:text-white">
              Slingshot
            </span>
          </a>

          <div class="w-full md:block md:w-auto">
            <ul class="flex flex-col mt-4 md:flex-row md:space-x-8 md:mt-0 md:text-sm md:font-medium">
              <li>
                <a
                  href="/"
                  class="block py-2 pr-4 pl-3 text-white bg-white-700 rounded md:bg-transparent md:text-white-700 md:p-0 dark:text-white"
                  aria-current="page"
                >
                  Home
                </a>
              </li>
              {!session ? (
                <li>
                  <button onClick={() => signIn("github")}>
                    <a class="block py-2 pr-4 pl-3 text-gray-700 border-b border-gray-100 hover:bg-gray-50 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-gray-400 md:dark:hover:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700">
                      Sign In
                    </a>
                  </button>
                </li>
              ) : (
                <div className="text-white">
                  Signed in as {session.user.name}
                  <button onClick={() => signOut()} className="ml-5">
                    <li>
                      <a class="block py-2 pr-4 pl-3 text-gray-700 border-b border-gray-100 hover:bg-gray-50 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 md:p-0 dark:text-gray-400 md:dark:hover:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700">
                        Sign Out
                      </a>
                    </li>
                  </button>
                </div>
              )}
            </ul>
          </div>
        </div>
      </nav>
      <br />
      {!session ? (
         <h1 className="block mb-2 text-sm font-large text-gray-900 dark:text-gray-300 text-center">
         To Add Requirements to Project, please Sign In!
       </h1>
      ) : (
        <>
        <>
      <div className="flex justify-center">
        <h1 className="text-white text-xl">{project.title}</h1>
      </div><br />
      <div className="flex justify-center">
        <form onSubmit={saveRequirement}>
          <div class="mb-6">
            <label
              for="project-title"
              class="block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300"
            >
              Requirement
            </label>
            <textarea
              type="text"
              rows='3'
              name="content"
              class="block p-2 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
              placeholder="Add Requirement"
              onChange={(e) =>
                setFormData({ ...formData, content: e.target.value })
              }
            />
          </div>
          <button
            type="submit"
            class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 mb-10"
          >
            Add Requirement
          </button>
        </form>
      </div>
      </>
      
      <div className="flex justify-center">
        <div className="bg-zinc-700 shadow-md rounded px-8 pt-6 pb-8 mb-4">
          
          <br />
          <ul className="list-disc">
             {requirements.map((item) => (
              <li className="m-5" key={item.id}>
              <span className="text-white text-md font-semibold mr-2 px-2.5 py-0.5 rounded">
                <Link href={`/requirements/${item.id}`}>
                <a>{item.content}</a>
                </Link>
              </span>
              <button
                  onClick={async () => {
                    await fetch("/api/DeleteProject", {
                      method: "DELETE",
                      body: JSON.stringify(item.id),
                    });
                    setRequirements(requirements.filter((prj) => prj !== item));
                  }}
                  className="text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900"
                >
                  Delete
                </button>
            </li>
            ))}
          </ul>
        </div>
      </div>
      </>
            )}
    </div>
    
  );
}

export async function getServerSideProps(context) {
  const { id } = context.query;

  const allRequirements = await prisma.requirement.findMany({
    where: {
      projectId: parseInt(id)
    }
  })

  const project = await prisma.project.findUnique({
    where: {
      id: parseInt(id)
    },
  });
  return {
    props: {
      project,
      allRequirements,
    },
  };
}
